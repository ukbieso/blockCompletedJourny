/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package no.ruter.events.avro.tps;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** TPS Route with Stops and Quays */
@org.apache.avro.specific.AvroGenerated
public class RouteStops extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2554406378669036667L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RouteStops\",\"namespace\":\"no.ruter.events.avro.tps\",\"doc\":\"TPS Route with Stops and Quays\",\"fields\":[{\"name\":\"routeId\",\"type\":\"string\"},{\"name\":\"routeName\",\"type\":\"string\"},{\"name\":\"journeyId\",\"type\":\"string\"},{\"name\":\"stops\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Stop\",\"doc\":\"Stop Place\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"quays\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Quay\",\"doc\":\"Quay for a Stop Place\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"position\",\"type\":{\"type\":\"record\",\"name\":\"Position\",\"doc\":\"Position\",\"fields\":[{\"name\":\"lat\",\"type\":\"double\"},{\"name\":\"lon\",\"type\":\"double\"}]}}]}}],\"default\":null}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<RouteStops> ENCODER =
      new BinaryMessageEncoder<RouteStops>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RouteStops> DECODER =
      new BinaryMessageDecoder<RouteStops>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<RouteStops> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<RouteStops> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<RouteStops>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this RouteStops to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a RouteStops from a ByteBuffer. */
  public static RouteStops fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence routeId;
  @Deprecated public java.lang.CharSequence routeName;
  @Deprecated public java.lang.CharSequence journeyId;
  @Deprecated public java.util.List<no.ruter.events.avro.tps.Stop> stops;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RouteStops() {}

  /**
   * All-args constructor.
   * @param routeId The new value for routeId
   * @param routeName The new value for routeName
   * @param journeyId The new value for journeyId
   * @param stops The new value for stops
   */
  public RouteStops(java.lang.CharSequence routeId, java.lang.CharSequence routeName, java.lang.CharSequence journeyId, java.util.List<no.ruter.events.avro.tps.Stop> stops) {
    this.routeId = routeId;
    this.routeName = routeName;
    this.journeyId = journeyId;
    this.stops = stops;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return routeId;
    case 1: return routeName;
    case 2: return journeyId;
    case 3: return stops;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: routeId = (java.lang.CharSequence)value$; break;
    case 1: routeName = (java.lang.CharSequence)value$; break;
    case 2: journeyId = (java.lang.CharSequence)value$; break;
    case 3: stops = (java.util.List<no.ruter.events.avro.tps.Stop>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'routeId' field.
   * @return The value of the 'routeId' field.
   */
  public java.lang.CharSequence getRouteId() {
    return routeId;
  }

  /**
   * Sets the value of the 'routeId' field.
   * @param value the value to set.
   */
  public void setRouteId(java.lang.CharSequence value) {
    this.routeId = value;
  }

  /**
   * Gets the value of the 'routeName' field.
   * @return The value of the 'routeName' field.
   */
  public java.lang.CharSequence getRouteName() {
    return routeName;
  }

  /**
   * Sets the value of the 'routeName' field.
   * @param value the value to set.
   */
  public void setRouteName(java.lang.CharSequence value) {
    this.routeName = value;
  }

  /**
   * Gets the value of the 'journeyId' field.
   * @return The value of the 'journeyId' field.
   */
  public java.lang.CharSequence getJourneyId() {
    return journeyId;
  }

  /**
   * Sets the value of the 'journeyId' field.
   * @param value the value to set.
   */
  public void setJourneyId(java.lang.CharSequence value) {
    this.journeyId = value;
  }

  /**
   * Gets the value of the 'stops' field.
   * @return The value of the 'stops' field.
   */
  public java.util.List<no.ruter.events.avro.tps.Stop> getStops() {
    return stops;
  }

  /**
   * Sets the value of the 'stops' field.
   * @param value the value to set.
   */
  public void setStops(java.util.List<no.ruter.events.avro.tps.Stop> value) {
    this.stops = value;
  }

  /**
   * Creates a new RouteStops RecordBuilder.
   * @return A new RouteStops RecordBuilder
   */
  public static no.ruter.events.avro.tps.RouteStops.Builder newBuilder() {
    return new no.ruter.events.avro.tps.RouteStops.Builder();
  }

  /**
   * Creates a new RouteStops RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RouteStops RecordBuilder
   */
  public static no.ruter.events.avro.tps.RouteStops.Builder newBuilder(no.ruter.events.avro.tps.RouteStops.Builder other) {
    return new no.ruter.events.avro.tps.RouteStops.Builder(other);
  }

  /**
   * Creates a new RouteStops RecordBuilder by copying an existing RouteStops instance.
   * @param other The existing instance to copy.
   * @return A new RouteStops RecordBuilder
   */
  public static no.ruter.events.avro.tps.RouteStops.Builder newBuilder(no.ruter.events.avro.tps.RouteStops other) {
    return new no.ruter.events.avro.tps.RouteStops.Builder(other);
  }

  /**
   * RecordBuilder for RouteStops instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RouteStops>
    implements org.apache.avro.data.RecordBuilder<RouteStops> {

    private java.lang.CharSequence routeId;
    private java.lang.CharSequence routeName;
    private java.lang.CharSequence journeyId;
    private java.util.List<no.ruter.events.avro.tps.Stop> stops;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(no.ruter.events.avro.tps.RouteStops.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.routeId)) {
        this.routeId = data().deepCopy(fields()[0].schema(), other.routeId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.routeName)) {
        this.routeName = data().deepCopy(fields()[1].schema(), other.routeName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.journeyId)) {
        this.journeyId = data().deepCopy(fields()[2].schema(), other.journeyId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.stops)) {
        this.stops = data().deepCopy(fields()[3].schema(), other.stops);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing RouteStops instance
     * @param other The existing instance to copy.
     */
    private Builder(no.ruter.events.avro.tps.RouteStops other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.routeId)) {
        this.routeId = data().deepCopy(fields()[0].schema(), other.routeId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.routeName)) {
        this.routeName = data().deepCopy(fields()[1].schema(), other.routeName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.journeyId)) {
        this.journeyId = data().deepCopy(fields()[2].schema(), other.journeyId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.stops)) {
        this.stops = data().deepCopy(fields()[3].schema(), other.stops);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'routeId' field.
      * @return The value.
      */
    public java.lang.CharSequence getRouteId() {
      return routeId;
    }

    /**
      * Sets the value of the 'routeId' field.
      * @param value The value of 'routeId'.
      * @return This builder.
      */
    public no.ruter.events.avro.tps.RouteStops.Builder setRouteId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.routeId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'routeId' field has been set.
      * @return True if the 'routeId' field has been set, false otherwise.
      */
    public boolean hasRouteId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'routeId' field.
      * @return This builder.
      */
    public no.ruter.events.avro.tps.RouteStops.Builder clearRouteId() {
      routeId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'routeName' field.
      * @return The value.
      */
    public java.lang.CharSequence getRouteName() {
      return routeName;
    }

    /**
      * Sets the value of the 'routeName' field.
      * @param value The value of 'routeName'.
      * @return This builder.
      */
    public no.ruter.events.avro.tps.RouteStops.Builder setRouteName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.routeName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'routeName' field has been set.
      * @return True if the 'routeName' field has been set, false otherwise.
      */
    public boolean hasRouteName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'routeName' field.
      * @return This builder.
      */
    public no.ruter.events.avro.tps.RouteStops.Builder clearRouteName() {
      routeName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'journeyId' field.
      * @return The value.
      */
    public java.lang.CharSequence getJourneyId() {
      return journeyId;
    }

    /**
      * Sets the value of the 'journeyId' field.
      * @param value The value of 'journeyId'.
      * @return This builder.
      */
    public no.ruter.events.avro.tps.RouteStops.Builder setJourneyId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.journeyId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'journeyId' field has been set.
      * @return True if the 'journeyId' field has been set, false otherwise.
      */
    public boolean hasJourneyId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'journeyId' field.
      * @return This builder.
      */
    public no.ruter.events.avro.tps.RouteStops.Builder clearJourneyId() {
      journeyId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'stops' field.
      * @return The value.
      */
    public java.util.List<no.ruter.events.avro.tps.Stop> getStops() {
      return stops;
    }

    /**
      * Sets the value of the 'stops' field.
      * @param value The value of 'stops'.
      * @return This builder.
      */
    public no.ruter.events.avro.tps.RouteStops.Builder setStops(java.util.List<no.ruter.events.avro.tps.Stop> value) {
      validate(fields()[3], value);
      this.stops = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'stops' field has been set.
      * @return True if the 'stops' field has been set, false otherwise.
      */
    public boolean hasStops() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'stops' field.
      * @return This builder.
      */
    public no.ruter.events.avro.tps.RouteStops.Builder clearStops() {
      stops = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RouteStops build() {
      try {
        RouteStops record = new RouteStops();
        record.routeId = fieldSetFlags()[0] ? this.routeId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.routeName = fieldSetFlags()[1] ? this.routeName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.journeyId = fieldSetFlags()[2] ? this.journeyId : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.stops = fieldSetFlags()[3] ? this.stops : (java.util.List<no.ruter.events.avro.tps.Stop>) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RouteStops>
    WRITER$ = (org.apache.avro.io.DatumWriter<RouteStops>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RouteStops>
    READER$ = (org.apache.avro.io.DatumReader<RouteStops>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
