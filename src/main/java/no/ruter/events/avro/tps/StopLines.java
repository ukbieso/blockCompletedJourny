/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package no.ruter.events.avro.tps;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** Stop Place with connecting Lines */
@org.apache.avro.specific.AvroGenerated
public class StopLines extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1770042699207055577L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StopLines\",\"namespace\":\"no.ruter.events.avro.tps\",\"doc\":\"Stop Place with connecting Lines\",\"fields\":[{\"name\":\"stop\",\"type\":{\"type\":\"record\",\"name\":\"Stop\",\"doc\":\"Stop Place\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"quays\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Quay\",\"doc\":\"Quay for a Stop Place\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"position\",\"type\":{\"type\":\"record\",\"name\":\"Position\",\"doc\":\"Position\",\"fields\":[{\"name\":\"lat\",\"type\":\"double\"},{\"name\":\"lon\",\"type\":\"double\"}]}}]}}],\"default\":null}]}},{\"name\":\"lines\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Line\",\"doc\":\"Line\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"publicCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"colour\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"transportMode\",\"type\":[\"null\",\"string\"],\"default\":null}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<StopLines> ENCODER =
      new BinaryMessageEncoder<StopLines>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<StopLines> DECODER =
      new BinaryMessageDecoder<StopLines>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<StopLines> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<StopLines> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<StopLines>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this StopLines to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a StopLines from a ByteBuffer. */
  public static StopLines fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public no.ruter.events.avro.tps.Stop stop;
  @Deprecated public java.util.List<no.ruter.events.avro.tps.Line> lines;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public StopLines() {}

  /**
   * All-args constructor.
   * @param stop The new value for stop
   * @param lines The new value for lines
   */
  public StopLines(no.ruter.events.avro.tps.Stop stop, java.util.List<no.ruter.events.avro.tps.Line> lines) {
    this.stop = stop;
    this.lines = lines;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return stop;
    case 1: return lines;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: stop = (no.ruter.events.avro.tps.Stop)value$; break;
    case 1: lines = (java.util.List<no.ruter.events.avro.tps.Line>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'stop' field.
   * @return The value of the 'stop' field.
   */
  public no.ruter.events.avro.tps.Stop getStop() {
    return stop;
  }

  /**
   * Sets the value of the 'stop' field.
   * @param value the value to set.
   */
  public void setStop(no.ruter.events.avro.tps.Stop value) {
    this.stop = value;
  }

  /**
   * Gets the value of the 'lines' field.
   * @return The value of the 'lines' field.
   */
  public java.util.List<no.ruter.events.avro.tps.Line> getLines() {
    return lines;
  }

  /**
   * Sets the value of the 'lines' field.
   * @param value the value to set.
   */
  public void setLines(java.util.List<no.ruter.events.avro.tps.Line> value) {
    this.lines = value;
  }

  /**
   * Creates a new StopLines RecordBuilder.
   * @return A new StopLines RecordBuilder
   */
  public static no.ruter.events.avro.tps.StopLines.Builder newBuilder() {
    return new no.ruter.events.avro.tps.StopLines.Builder();
  }

  /**
   * Creates a new StopLines RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new StopLines RecordBuilder
   */
  public static no.ruter.events.avro.tps.StopLines.Builder newBuilder(no.ruter.events.avro.tps.StopLines.Builder other) {
    return new no.ruter.events.avro.tps.StopLines.Builder(other);
  }

  /**
   * Creates a new StopLines RecordBuilder by copying an existing StopLines instance.
   * @param other The existing instance to copy.
   * @return A new StopLines RecordBuilder
   */
  public static no.ruter.events.avro.tps.StopLines.Builder newBuilder(no.ruter.events.avro.tps.StopLines other) {
    return new no.ruter.events.avro.tps.StopLines.Builder(other);
  }

  /**
   * RecordBuilder for StopLines instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StopLines>
    implements org.apache.avro.data.RecordBuilder<StopLines> {

    private no.ruter.events.avro.tps.Stop stop;
    private no.ruter.events.avro.tps.Stop.Builder stopBuilder;
    private java.util.List<no.ruter.events.avro.tps.Line> lines;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(no.ruter.events.avro.tps.StopLines.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.stop)) {
        this.stop = data().deepCopy(fields()[0].schema(), other.stop);
        fieldSetFlags()[0] = true;
      }
      if (other.hasStopBuilder()) {
        this.stopBuilder = no.ruter.events.avro.tps.Stop.newBuilder(other.getStopBuilder());
      }
      if (isValidValue(fields()[1], other.lines)) {
        this.lines = data().deepCopy(fields()[1].schema(), other.lines);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing StopLines instance
     * @param other The existing instance to copy.
     */
    private Builder(no.ruter.events.avro.tps.StopLines other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.stop)) {
        this.stop = data().deepCopy(fields()[0].schema(), other.stop);
        fieldSetFlags()[0] = true;
      }
      this.stopBuilder = null;
      if (isValidValue(fields()[1], other.lines)) {
        this.lines = data().deepCopy(fields()[1].schema(), other.lines);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'stop' field.
      * @return The value.
      */
    public no.ruter.events.avro.tps.Stop getStop() {
      return stop;
    }

    /**
      * Sets the value of the 'stop' field.
      * @param value The value of 'stop'.
      * @return This builder.
      */
    public no.ruter.events.avro.tps.StopLines.Builder setStop(no.ruter.events.avro.tps.Stop value) {
      validate(fields()[0], value);
      this.stopBuilder = null;
      this.stop = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'stop' field has been set.
      * @return True if the 'stop' field has been set, false otherwise.
      */
    public boolean hasStop() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'stop' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public no.ruter.events.avro.tps.Stop.Builder getStopBuilder() {
      if (stopBuilder == null) {
        if (hasStop()) {
          setStopBuilder(no.ruter.events.avro.tps.Stop.newBuilder(stop));
        } else {
          setStopBuilder(no.ruter.events.avro.tps.Stop.newBuilder());
        }
      }
      return stopBuilder;
    }

    /**
     * Sets the Builder instance for the 'stop' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public no.ruter.events.avro.tps.StopLines.Builder setStopBuilder(no.ruter.events.avro.tps.Stop.Builder value) {
      clearStop();
      stopBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'stop' field has an active Builder instance
     * @return True if the 'stop' field has an active Builder instance
     */
    public boolean hasStopBuilder() {
      return stopBuilder != null;
    }

    /**
      * Clears the value of the 'stop' field.
      * @return This builder.
      */
    public no.ruter.events.avro.tps.StopLines.Builder clearStop() {
      stop = null;
      stopBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'lines' field.
      * @return The value.
      */
    public java.util.List<no.ruter.events.avro.tps.Line> getLines() {
      return lines;
    }

    /**
      * Sets the value of the 'lines' field.
      * @param value The value of 'lines'.
      * @return This builder.
      */
    public no.ruter.events.avro.tps.StopLines.Builder setLines(java.util.List<no.ruter.events.avro.tps.Line> value) {
      validate(fields()[1], value);
      this.lines = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'lines' field has been set.
      * @return True if the 'lines' field has been set, false otherwise.
      */
    public boolean hasLines() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'lines' field.
      * @return This builder.
      */
    public no.ruter.events.avro.tps.StopLines.Builder clearLines() {
      lines = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public StopLines build() {
      try {
        StopLines record = new StopLines();
        if (stopBuilder != null) {
          record.stop = this.stopBuilder.build();
        } else {
          record.stop = fieldSetFlags()[0] ? this.stop : (no.ruter.events.avro.tps.Stop) defaultValue(fields()[0]);
        }
        record.lines = fieldSetFlags()[1] ? this.lines : (java.util.List<no.ruter.events.avro.tps.Line>) defaultValue(fields()[1]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<StopLines>
    WRITER$ = (org.apache.avro.io.DatumWriter<StopLines>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<StopLines>
    READER$ = (org.apache.avro.io.DatumReader<StopLines>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
