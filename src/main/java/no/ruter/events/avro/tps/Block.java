/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package no.ruter.events.avro.tps;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** Block for a given day */
@org.apache.avro.specific.AvroGenerated

public class Block extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1670416029955235817L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Block\",\"namespace\":\"no.ruter.events.avro.tps\",\"doc\":\"Block for a given day\",\"fields\":[{\"name\":\"date\",\"type\":\"string\"},{\"name\":\"blockRef\",\"type\":\"string\"},{\"name\":\"hastusBlockId\",\"type\":\"string\"},{\"name\":\"journeys\",\"type\":{\"type\":\"array\",\"items\":\"string\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Block> ENCODER =
      new BinaryMessageEncoder<Block>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Block> DECODER =
      new BinaryMessageDecoder<Block>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Block> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Block> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Block>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Block to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Block from a ByteBuffer. */
  public static Block fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence date;
  @Deprecated public java.lang.CharSequence blockRef;
  @Deprecated public java.lang.CharSequence hastusBlockId;
  @Deprecated public java.util.List<java.lang.CharSequence> journeys;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Block() {}

  /**
   * All-args constructor.
   * @param date The new value for date
   * @param blockRef The new value for blockRef
   * @param hastusBlockId The new value for hastusBlockId
   * @param journeys The new value for journeys
   */
  public Block(java.lang.CharSequence date, java.lang.CharSequence blockRef, java.lang.CharSequence hastusBlockId, java.util.List<java.lang.CharSequence> journeys) {
    this.date = date;
    this.blockRef = blockRef;
    this.hastusBlockId = hastusBlockId;
    this.journeys = journeys;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return date;
    case 1: return blockRef;
    case 2: return hastusBlockId;
    case 3: return journeys;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: date = (java.lang.CharSequence)value$; break;
    case 1: blockRef = (java.lang.CharSequence)value$; break;
    case 2: hastusBlockId = (java.lang.CharSequence)value$; break;
    case 3: journeys = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'date' field.
   * @return The value of the 'date' field.
   */
  public java.lang.CharSequence getDate() {
    return date;
  }

  /**
   * Sets the value of the 'date' field.
   * @param value the value to set.
   */
  public void setDate(java.lang.CharSequence value) {
    this.date = value;
  }

  /**
   * Gets the value of the 'blockRef' field.
   * @return The value of the 'blockRef' field.
   */
  public java.lang.CharSequence getBlockRef() {
    return blockRef;
  }

  /**
   * Sets the value of the 'blockRef' field.
   * @param value the value to set.
   */
  public void setBlockRef(java.lang.CharSequence value) {
    this.blockRef = value;
  }

  /**
   * Gets the value of the 'hastusBlockId' field.
   * @return The value of the 'hastusBlockId' field.
   */
  public java.lang.CharSequence getHastusBlockId() {
    return hastusBlockId;
  }

  /**
   * Sets the value of the 'hastusBlockId' field.
   * @param value the value to set.
   */
  public void setHastusBlockId(java.lang.CharSequence value) {
    this.hastusBlockId = value;
  }

  /**
   * Gets the value of the 'journeys' field.
   * @return The value of the 'journeys' field.
   */
  public java.util.List<java.lang.CharSequence> getJourneys() {
    return journeys;
  }

  /**
   * Sets the value of the 'journeys' field.
   * @param value the value to set.
   */
  public void setJourneys(java.util.List<java.lang.CharSequence> value) {
    this.journeys = value;
  }

  /**
   * Creates a new Block RecordBuilder.
   * @return A new Block RecordBuilder
   */
  public static no.ruter.events.avro.tps.Block.Builder newBuilder() {
    return new no.ruter.events.avro.tps.Block.Builder();
  }

  /**
   * Creates a new Block RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Block RecordBuilder
   */
  public static no.ruter.events.avro.tps.Block.Builder newBuilder(no.ruter.events.avro.tps.Block.Builder other) {
    return new no.ruter.events.avro.tps.Block.Builder(other);
  }

  /**
   * Creates a new Block RecordBuilder by copying an existing Block instance.
   * @param other The existing instance to copy.
   * @return A new Block RecordBuilder
   */
  public static no.ruter.events.avro.tps.Block.Builder newBuilder(no.ruter.events.avro.tps.Block other) {
    return new no.ruter.events.avro.tps.Block.Builder(other);
  }

  /**
   * RecordBuilder for Block instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Block>
    implements org.apache.avro.data.RecordBuilder<Block> {

    private java.lang.CharSequence date;
    private java.lang.CharSequence blockRef;
    private java.lang.CharSequence hastusBlockId;
    private java.util.List<java.lang.CharSequence> journeys;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(no.ruter.events.avro.tps.Block.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.date)) {
        this.date = data().deepCopy(fields()[0].schema(), other.date);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.blockRef)) {
        this.blockRef = data().deepCopy(fields()[1].schema(), other.blockRef);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.hastusBlockId)) {
        this.hastusBlockId = data().deepCopy(fields()[2].schema(), other.hastusBlockId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.journeys)) {
        this.journeys = data().deepCopy(fields()[3].schema(), other.journeys);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Block instance
     * @param other The existing instance to copy.
     */
    private Builder(no.ruter.events.avro.tps.Block other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.date)) {
        this.date = data().deepCopy(fields()[0].schema(), other.date);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.blockRef)) {
        this.blockRef = data().deepCopy(fields()[1].schema(), other.blockRef);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.hastusBlockId)) {
        this.hastusBlockId = data().deepCopy(fields()[2].schema(), other.hastusBlockId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.journeys)) {
        this.journeys = data().deepCopy(fields()[3].schema(), other.journeys);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'date' field.
      * @return The value.
      */
    public java.lang.CharSequence getDate() {
      return date;
    }

    /**
      * Sets the value of the 'date' field.
      * @param value The value of 'date'.
      * @return This builder.
      */
    public no.ruter.events.avro.tps.Block.Builder setDate(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.date = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'date' field has been set.
      * @return True if the 'date' field has been set, false otherwise.
      */
    public boolean hasDate() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'date' field.
      * @return This builder.
      */
    public no.ruter.events.avro.tps.Block.Builder clearDate() {
      date = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'blockRef' field.
      * @return The value.
      */
    public java.lang.CharSequence getBlockRef() {
      return blockRef;
    }

    /**
      * Sets the value of the 'blockRef' field.
      * @param value The value of 'blockRef'.
      * @return This builder.
      */
    public no.ruter.events.avro.tps.Block.Builder setBlockRef(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.blockRef = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'blockRef' field has been set.
      * @return True if the 'blockRef' field has been set, false otherwise.
      */
    public boolean hasBlockRef() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'blockRef' field.
      * @return This builder.
      */
    public no.ruter.events.avro.tps.Block.Builder clearBlockRef() {
      blockRef = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'hastusBlockId' field.
      * @return The value.
      */
    public java.lang.CharSequence getHastusBlockId() {
      return hastusBlockId;
    }

    /**
      * Sets the value of the 'hastusBlockId' field.
      * @param value The value of 'hastusBlockId'.
      * @return This builder.
      */
    public no.ruter.events.avro.tps.Block.Builder setHastusBlockId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.hastusBlockId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'hastusBlockId' field has been set.
      * @return True if the 'hastusBlockId' field has been set, false otherwise.
      */
    public boolean hasHastusBlockId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'hastusBlockId' field.
      * @return This builder.
      */
    public no.ruter.events.avro.tps.Block.Builder clearHastusBlockId() {
      hastusBlockId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'journeys' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getJourneys() {
      return journeys;
    }

    /**
      * Sets the value of the 'journeys' field.
      * @param value The value of 'journeys'.
      * @return This builder.
      */
    public no.ruter.events.avro.tps.Block.Builder setJourneys(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[3], value);
      this.journeys = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'journeys' field has been set.
      * @return True if the 'journeys' field has been set, false otherwise.
      */
    public boolean hasJourneys() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'journeys' field.
      * @return This builder.
      */
    public no.ruter.events.avro.tps.Block.Builder clearJourneys() {
      journeys = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Block build() {
      try {
        Block record = new Block();
        record.date = fieldSetFlags()[0] ? this.date : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.blockRef = fieldSetFlags()[1] ? this.blockRef : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.hastusBlockId = fieldSetFlags()[2] ? this.hastusBlockId : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.journeys = fieldSetFlags()[3] ? this.journeys : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Block>
    WRITER$ = (org.apache.avro.io.DatumWriter<Block>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Block>
    READER$ = (org.apache.avro.io.DatumReader<Block>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
