/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package no.ruter.avro.entity.actual.journey.status;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** Delay object */
@org.apache.avro.specific.AvroGenerated
public class JourneyDelay extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4566249895521122298L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"JourneyDelay\",\"namespace\":\"no.ruter.avro.entity.actual.journey.status\",\"doc\":\"Delay object\",\"fields\":[{\"name\":\"Delay\",\"type\":\"int\",\"doc\":\"Delay in seconds. Negative numbers are ahead of shedule.\"},{\"name\":\"Source\",\"type\":{\"type\":\"enum\",\"name\":\"Source\",\"doc\":\"Source of delay information.\",\"symbols\":[\"SIS\",\"UNKNOWN\"]},\"doc\":\"Source of delay information.\"},{\"name\":\"DelayTimestamp\",\"type\":[\"null\",\"string\"],\"doc\":\"Timestamp for delay estimation.\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<JourneyDelay> ENCODER =
      new BinaryMessageEncoder<JourneyDelay>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<JourneyDelay> DECODER =
      new BinaryMessageDecoder<JourneyDelay>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<JourneyDelay> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<JourneyDelay> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<JourneyDelay>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this JourneyDelay to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a JourneyDelay from a ByteBuffer. */
  public static JourneyDelay fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Delay in seconds. Negative numbers are ahead of shedule. */
  @Deprecated public int Delay;
  /** Source of delay information. */
  @Deprecated public no.ruter.avro.entity.actual.journey.status.Source Source;
  /** Timestamp for delay estimation. */
  @Deprecated public java.lang.CharSequence DelayTimestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public JourneyDelay() {}

  /**
   * All-args constructor.
   * @param Delay Delay in seconds. Negative numbers are ahead of shedule.
   * @param Source Source of delay information.
   * @param DelayTimestamp Timestamp for delay estimation.
   */
  public JourneyDelay(java.lang.Integer Delay, no.ruter.avro.entity.actual.journey.status.Source Source, java.lang.CharSequence DelayTimestamp) {
    this.Delay = Delay;
    this.Source = Source;
    this.DelayTimestamp = DelayTimestamp;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return Delay;
    case 1: return Source;
    case 2: return DelayTimestamp;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: Delay = (java.lang.Integer)value$; break;
    case 1: Source = (no.ruter.avro.entity.actual.journey.status.Source)value$; break;
    case 2: DelayTimestamp = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'Delay' field.
   * @return Delay in seconds. Negative numbers are ahead of shedule.
   */
  public java.lang.Integer getDelay() {
    return Delay;
  }

  /**
   * Sets the value of the 'Delay' field.
   * Delay in seconds. Negative numbers are ahead of shedule.
   * @param value the value to set.
   */
  public void setDelay(java.lang.Integer value) {
    this.Delay = value;
  }

  /**
   * Gets the value of the 'Source' field.
   * @return Source of delay information.
   */
  public no.ruter.avro.entity.actual.journey.status.Source getSource() {
    return Source;
  }

  /**
   * Sets the value of the 'Source' field.
   * Source of delay information.
   * @param value the value to set.
   */
  public void setSource(no.ruter.avro.entity.actual.journey.status.Source value) {
    this.Source = value;
  }

  /**
   * Gets the value of the 'DelayTimestamp' field.
   * @return Timestamp for delay estimation.
   */
  public java.lang.CharSequence getDelayTimestamp() {
    return DelayTimestamp;
  }

  /**
   * Sets the value of the 'DelayTimestamp' field.
   * Timestamp for delay estimation.
   * @param value the value to set.
   */
  public void setDelayTimestamp(java.lang.CharSequence value) {
    this.DelayTimestamp = value;
  }

  /**
   * Creates a new JourneyDelay RecordBuilder.
   * @return A new JourneyDelay RecordBuilder
   */
  public static no.ruter.avro.entity.actual.journey.status.JourneyDelay.Builder newBuilder() {
    return new no.ruter.avro.entity.actual.journey.status.JourneyDelay.Builder();
  }

  /**
   * Creates a new JourneyDelay RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new JourneyDelay RecordBuilder
   */
  public static no.ruter.avro.entity.actual.journey.status.JourneyDelay.Builder newBuilder(no.ruter.avro.entity.actual.journey.status.JourneyDelay.Builder other) {
    return new no.ruter.avro.entity.actual.journey.status.JourneyDelay.Builder(other);
  }

  /**
   * Creates a new JourneyDelay RecordBuilder by copying an existing JourneyDelay instance.
   * @param other The existing instance to copy.
   * @return A new JourneyDelay RecordBuilder
   */
  public static no.ruter.avro.entity.actual.journey.status.JourneyDelay.Builder newBuilder(no.ruter.avro.entity.actual.journey.status.JourneyDelay other) {
    return new no.ruter.avro.entity.actual.journey.status.JourneyDelay.Builder(other);
  }

  /**
   * RecordBuilder for JourneyDelay instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<JourneyDelay>
    implements org.apache.avro.data.RecordBuilder<JourneyDelay> {

    /** Delay in seconds. Negative numbers are ahead of shedule. */
    private int Delay;
    /** Source of delay information. */
    private no.ruter.avro.entity.actual.journey.status.Source Source;
    /** Timestamp for delay estimation. */
    private java.lang.CharSequence DelayTimestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(no.ruter.avro.entity.actual.journey.status.JourneyDelay.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.Delay)) {
        this.Delay = data().deepCopy(fields()[0].schema(), other.Delay);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Source)) {
        this.Source = data().deepCopy(fields()[1].schema(), other.Source);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.DelayTimestamp)) {
        this.DelayTimestamp = data().deepCopy(fields()[2].schema(), other.DelayTimestamp);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing JourneyDelay instance
     * @param other The existing instance to copy.
     */
    private Builder(no.ruter.avro.entity.actual.journey.status.JourneyDelay other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.Delay)) {
        this.Delay = data().deepCopy(fields()[0].schema(), other.Delay);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Source)) {
        this.Source = data().deepCopy(fields()[1].schema(), other.Source);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.DelayTimestamp)) {
        this.DelayTimestamp = data().deepCopy(fields()[2].schema(), other.DelayTimestamp);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'Delay' field.
      * Delay in seconds. Negative numbers are ahead of shedule.
      * @return The value.
      */
    public java.lang.Integer getDelay() {
      return Delay;
    }

    /**
      * Sets the value of the 'Delay' field.
      * Delay in seconds. Negative numbers are ahead of shedule.
      * @param value The value of 'Delay'.
      * @return This builder.
      */
    public no.ruter.avro.entity.actual.journey.status.JourneyDelay.Builder setDelay(int value) {
      validate(fields()[0], value);
      this.Delay = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'Delay' field has been set.
      * Delay in seconds. Negative numbers are ahead of shedule.
      * @return True if the 'Delay' field has been set, false otherwise.
      */
    public boolean hasDelay() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'Delay' field.
      * Delay in seconds. Negative numbers are ahead of shedule.
      * @return This builder.
      */
    public no.ruter.avro.entity.actual.journey.status.JourneyDelay.Builder clearDelay() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'Source' field.
      * Source of delay information.
      * @return The value.
      */
    public no.ruter.avro.entity.actual.journey.status.Source getSource() {
      return Source;
    }

    /**
      * Sets the value of the 'Source' field.
      * Source of delay information.
      * @param value The value of 'Source'.
      * @return This builder.
      */
    public no.ruter.avro.entity.actual.journey.status.JourneyDelay.Builder setSource(no.ruter.avro.entity.actual.journey.status.Source value) {
      validate(fields()[1], value);
      this.Source = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'Source' field has been set.
      * Source of delay information.
      * @return True if the 'Source' field has been set, false otherwise.
      */
    public boolean hasSource() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'Source' field.
      * Source of delay information.
      * @return This builder.
      */
    public no.ruter.avro.entity.actual.journey.status.JourneyDelay.Builder clearSource() {
      Source = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'DelayTimestamp' field.
      * Timestamp for delay estimation.
      * @return The value.
      */
    public java.lang.CharSequence getDelayTimestamp() {
      return DelayTimestamp;
    }

    /**
      * Sets the value of the 'DelayTimestamp' field.
      * Timestamp for delay estimation.
      * @param value The value of 'DelayTimestamp'.
      * @return This builder.
      */
    public no.ruter.avro.entity.actual.journey.status.JourneyDelay.Builder setDelayTimestamp(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.DelayTimestamp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'DelayTimestamp' field has been set.
      * Timestamp for delay estimation.
      * @return True if the 'DelayTimestamp' field has been set, false otherwise.
      */
    public boolean hasDelayTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'DelayTimestamp' field.
      * Timestamp for delay estimation.
      * @return This builder.
      */
    public no.ruter.avro.entity.actual.journey.status.JourneyDelay.Builder clearDelayTimestamp() {
      DelayTimestamp = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public JourneyDelay build() {
      try {
        JourneyDelay record = new JourneyDelay();
        record.Delay = fieldSetFlags()[0] ? this.Delay : (java.lang.Integer) defaultValue(fields()[0]);
        record.Source = fieldSetFlags()[1] ? this.Source : (no.ruter.avro.entity.actual.journey.status.Source) defaultValue(fields()[1]);
        record.DelayTimestamp = fieldSetFlags()[2] ? this.DelayTimestamp : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<JourneyDelay>
    WRITER$ = (org.apache.avro.io.DatumWriter<JourneyDelay>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<JourneyDelay>
    READER$ = (org.apache.avro.io.DatumReader<JourneyDelay>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
