/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package no.ruter.avro.entity.actual.block.key;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** The data of the entity partition */
@org.apache.avro.specific.AvroGenerated
public class EntityPartition extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8719081683032283210L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EntityPartition\",\"namespace\":\"no.ruter.avro.entity.actual.block.key\",\"doc\":\"The data of the entity partition\",\"fields\":[{\"name\":\"Key\",\"type\":\"string\",\"doc\":\"The key of an entity. All entities must use the key attribute to store their primary key\"},{\"name\":\"BlockRef\",\"type\":\"string\",\"doc\":\"Reference to  block this actual block is on.\"},{\"name\":\"VehicleRef\",\"type\":\"string\",\"doc\":\"Reference to the vehicle delivering this actual block.\"},{\"name\":\"lastActualJourneyRef\",\"type\":[\"null\",\"string\"],\"doc\":\"Reference to the last actual journey on block\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EntityPartition> ENCODER =
      new BinaryMessageEncoder<EntityPartition>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EntityPartition> DECODER =
      new BinaryMessageDecoder<EntityPartition>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<EntityPartition> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<EntityPartition> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<EntityPartition>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this EntityPartition to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a EntityPartition from a ByteBuffer. */
  public static EntityPartition fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The key of an entity. All entities must use the key attribute to store their primary key */
  @Deprecated public java.lang.CharSequence Key;
  /** Reference to  block this actual block is on. */
  @Deprecated public java.lang.CharSequence BlockRef;
  /** Reference to the vehicle delivering this actual block. */
  @Deprecated public java.lang.CharSequence VehicleRef;
  /** Reference to the last actual journey on block */
  @Deprecated public java.lang.CharSequence lastActualJourneyRef;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EntityPartition() {}

  /**
   * All-args constructor.
   * @param Key The key of an entity. All entities must use the key attribute to store their primary key
   * @param BlockRef Reference to  block this actual block is on.
   * @param VehicleRef Reference to the vehicle delivering this actual block.
   * @param lastActualJourneyRef Reference to the last actual journey on block
   */
  public EntityPartition(java.lang.CharSequence Key, java.lang.CharSequence BlockRef, java.lang.CharSequence VehicleRef, java.lang.CharSequence lastActualJourneyRef) {
    this.Key = Key;
    this.BlockRef = BlockRef;
    this.VehicleRef = VehicleRef;
    this.lastActualJourneyRef = lastActualJourneyRef;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return Key;
    case 1: return BlockRef;
    case 2: return VehicleRef;
    case 3: return lastActualJourneyRef;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: Key = (java.lang.CharSequence)value$; break;
    case 1: BlockRef = (java.lang.CharSequence)value$; break;
    case 2: VehicleRef = (java.lang.CharSequence)value$; break;
    case 3: lastActualJourneyRef = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'Key' field.
   * @return The key of an entity. All entities must use the key attribute to store their primary key
   */
  public java.lang.CharSequence getKey() {
    return Key;
  }

  /**
   * Sets the value of the 'Key' field.
   * The key of an entity. All entities must use the key attribute to store their primary key
   * @param value the value to set.
   */
  public void setKey(java.lang.CharSequence value) {
    this.Key = value;
  }

  /**
   * Gets the value of the 'BlockRef' field.
   * @return Reference to  block this actual block is on.
   */
  public java.lang.CharSequence getBlockRef() {
    return BlockRef;
  }

  /**
   * Sets the value of the 'BlockRef' field.
   * Reference to  block this actual block is on.
   * @param value the value to set.
   */
  public void setBlockRef(java.lang.CharSequence value) {
    this.BlockRef = value;
  }

  /**
   * Gets the value of the 'VehicleRef' field.
   * @return Reference to the vehicle delivering this actual block.
   */
  public java.lang.CharSequence getVehicleRef() {
    return VehicleRef;
  }

  /**
   * Sets the value of the 'VehicleRef' field.
   * Reference to the vehicle delivering this actual block.
   * @param value the value to set.
   */
  public void setVehicleRef(java.lang.CharSequence value) {
    this.VehicleRef = value;
  }

  /**
   * Gets the value of the 'lastActualJourneyRef' field.
   * @return Reference to the last actual journey on block
   */
  public java.lang.CharSequence getLastActualJourneyRef() {
    return lastActualJourneyRef;
  }

  /**
   * Sets the value of the 'lastActualJourneyRef' field.
   * Reference to the last actual journey on block
   * @param value the value to set.
   */
  public void setLastActualJourneyRef(java.lang.CharSequence value) {
    this.lastActualJourneyRef = value;
  }

  /**
   * Creates a new EntityPartition RecordBuilder.
   * @return A new EntityPartition RecordBuilder
   */
  public static no.ruter.avro.entity.actual.block.key.EntityPartition.Builder newBuilder() {
    return new no.ruter.avro.entity.actual.block.key.EntityPartition.Builder();
  }

  /**
   * Creates a new EntityPartition RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EntityPartition RecordBuilder
   */
  public static no.ruter.avro.entity.actual.block.key.EntityPartition.Builder newBuilder(no.ruter.avro.entity.actual.block.key.EntityPartition.Builder other) {
    return new no.ruter.avro.entity.actual.block.key.EntityPartition.Builder(other);
  }

  /**
   * Creates a new EntityPartition RecordBuilder by copying an existing EntityPartition instance.
   * @param other The existing instance to copy.
   * @return A new EntityPartition RecordBuilder
   */
  public static no.ruter.avro.entity.actual.block.key.EntityPartition.Builder newBuilder(no.ruter.avro.entity.actual.block.key.EntityPartition other) {
    return new no.ruter.avro.entity.actual.block.key.EntityPartition.Builder(other);
  }

  /**
   * RecordBuilder for EntityPartition instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EntityPartition>
    implements org.apache.avro.data.RecordBuilder<EntityPartition> {

    /** The key of an entity. All entities must use the key attribute to store their primary key */
    private java.lang.CharSequence Key;
    /** Reference to  block this actual block is on. */
    private java.lang.CharSequence BlockRef;
    /** Reference to the vehicle delivering this actual block. */
    private java.lang.CharSequence VehicleRef;
    /** Reference to the last actual journey on block */
    private java.lang.CharSequence lastActualJourneyRef;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(no.ruter.avro.entity.actual.block.key.EntityPartition.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.Key)) {
        this.Key = data().deepCopy(fields()[0].schema(), other.Key);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.BlockRef)) {
        this.BlockRef = data().deepCopy(fields()[1].schema(), other.BlockRef);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.VehicleRef)) {
        this.VehicleRef = data().deepCopy(fields()[2].schema(), other.VehicleRef);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.lastActualJourneyRef)) {
        this.lastActualJourneyRef = data().deepCopy(fields()[3].schema(), other.lastActualJourneyRef);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing EntityPartition instance
     * @param other The existing instance to copy.
     */
    private Builder(no.ruter.avro.entity.actual.block.key.EntityPartition other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.Key)) {
        this.Key = data().deepCopy(fields()[0].schema(), other.Key);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.BlockRef)) {
        this.BlockRef = data().deepCopy(fields()[1].schema(), other.BlockRef);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.VehicleRef)) {
        this.VehicleRef = data().deepCopy(fields()[2].schema(), other.VehicleRef);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.lastActualJourneyRef)) {
        this.lastActualJourneyRef = data().deepCopy(fields()[3].schema(), other.lastActualJourneyRef);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'Key' field.
      * The key of an entity. All entities must use the key attribute to store their primary key
      * @return The value.
      */
    public java.lang.CharSequence getKey() {
      return Key;
    }

    /**
      * Sets the value of the 'Key' field.
      * The key of an entity. All entities must use the key attribute to store their primary key
      * @param value The value of 'Key'.
      * @return This builder.
      */
    public no.ruter.avro.entity.actual.block.key.EntityPartition.Builder setKey(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.Key = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'Key' field has been set.
      * The key of an entity. All entities must use the key attribute to store their primary key
      * @return True if the 'Key' field has been set, false otherwise.
      */
    public boolean hasKey() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'Key' field.
      * The key of an entity. All entities must use the key attribute to store their primary key
      * @return This builder.
      */
    public no.ruter.avro.entity.actual.block.key.EntityPartition.Builder clearKey() {
      Key = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'BlockRef' field.
      * Reference to  block this actual block is on.
      * @return The value.
      */
    public java.lang.CharSequence getBlockRef() {
      return BlockRef;
    }

    /**
      * Sets the value of the 'BlockRef' field.
      * Reference to  block this actual block is on.
      * @param value The value of 'BlockRef'.
      * @return This builder.
      */
    public no.ruter.avro.entity.actual.block.key.EntityPartition.Builder setBlockRef(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.BlockRef = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'BlockRef' field has been set.
      * Reference to  block this actual block is on.
      * @return True if the 'BlockRef' field has been set, false otherwise.
      */
    public boolean hasBlockRef() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'BlockRef' field.
      * Reference to  block this actual block is on.
      * @return This builder.
      */
    public no.ruter.avro.entity.actual.block.key.EntityPartition.Builder clearBlockRef() {
      BlockRef = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'VehicleRef' field.
      * Reference to the vehicle delivering this actual block.
      * @return The value.
      */
    public java.lang.CharSequence getVehicleRef() {
      return VehicleRef;
    }

    /**
      * Sets the value of the 'VehicleRef' field.
      * Reference to the vehicle delivering this actual block.
      * @param value The value of 'VehicleRef'.
      * @return This builder.
      */
    public no.ruter.avro.entity.actual.block.key.EntityPartition.Builder setVehicleRef(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.VehicleRef = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'VehicleRef' field has been set.
      * Reference to the vehicle delivering this actual block.
      * @return True if the 'VehicleRef' field has been set, false otherwise.
      */
    public boolean hasVehicleRef() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'VehicleRef' field.
      * Reference to the vehicle delivering this actual block.
      * @return This builder.
      */
    public no.ruter.avro.entity.actual.block.key.EntityPartition.Builder clearVehicleRef() {
      VehicleRef = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastActualJourneyRef' field.
      * Reference to the last actual journey on block
      * @return The value.
      */
    public java.lang.CharSequence getLastActualJourneyRef() {
      return lastActualJourneyRef;
    }

    /**
      * Sets the value of the 'lastActualJourneyRef' field.
      * Reference to the last actual journey on block
      * @param value The value of 'lastActualJourneyRef'.
      * @return This builder.
      */
    public no.ruter.avro.entity.actual.block.key.EntityPartition.Builder setLastActualJourneyRef(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.lastActualJourneyRef = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'lastActualJourneyRef' field has been set.
      * Reference to the last actual journey on block
      * @return True if the 'lastActualJourneyRef' field has been set, false otherwise.
      */
    public boolean hasLastActualJourneyRef() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'lastActualJourneyRef' field.
      * Reference to the last actual journey on block
      * @return This builder.
      */
    public no.ruter.avro.entity.actual.block.key.EntityPartition.Builder clearLastActualJourneyRef() {
      lastActualJourneyRef = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EntityPartition build() {
      try {
        EntityPartition record = new EntityPartition();
        record.Key = fieldSetFlags()[0] ? this.Key : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.BlockRef = fieldSetFlags()[1] ? this.BlockRef : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.VehicleRef = fieldSetFlags()[2] ? this.VehicleRef : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.lastActualJourneyRef = fieldSetFlags()[3] ? this.lastActualJourneyRef : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EntityPartition>
    WRITER$ = (org.apache.avro.io.DatumWriter<EntityPartition>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EntityPartition>
    READER$ = (org.apache.avro.io.DatumReader<EntityPartition>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
