/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package actualblock.key;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** The data of the entity partition */
@org.apache.avro.specific.AvroGenerated
public class entityPartition extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6769821330381055414L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"entityPartition\",\"namespace\":\"actualblock.key\",\"doc\":\"The data of the entity partition\",\"fields\":[{\"name\":\"key\",\"type\":\"string\",\"doc\":\"The key of an entity. All entities must use the key attribute to store their primary key\"},{\"name\":\"lineNumber\",\"type\":\"string\",\"doc\":\"The line number related to this block journy\"},{\"name\":\"antalTurerKM\",\"type\":\"string\",\"doc\":\"The total km by the actual block with the refernced vvehicle\"},{\"name\":\"blockRef\",\"type\":\"string\",\"doc\":\"Reference to  block this actual block is on.\"},{\"name\":\"vehicleRef\",\"type\":\"string\",\"doc\":\"Reference to the vehicle delivering this actual journey.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<entityPartition> ENCODER =
      new BinaryMessageEncoder<entityPartition>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<entityPartition> DECODER =
      new BinaryMessageDecoder<entityPartition>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<entityPartition> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<entityPartition> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<entityPartition>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this entityPartition to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a entityPartition from a ByteBuffer. */
  public static entityPartition fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The key of an entity. All entities must use the key attribute to store their primary key */
  @Deprecated public java.lang.CharSequence key;
  /** The line number related to this block journy */
  @Deprecated public java.lang.CharSequence lineNumber;
  /** The total km by the actual block with the refernced vvehicle */
  @Deprecated public java.lang.CharSequence antalTurerKM;
  /** Reference to  block this actual block is on. */
  @Deprecated public java.lang.CharSequence blockRef;
  /** Reference to the vehicle delivering this actual journey. */
  @Deprecated public java.lang.CharSequence vehicleRef;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public entityPartition() {}

  /**
   * All-args constructor.
   * @param key The key of an entity. All entities must use the key attribute to store their primary key
   * @param lineNumber The line number related to this block journy
   * @param antalTurerKM The total km by the actual block with the refernced vvehicle
   * @param blockRef Reference to  block this actual block is on.
   * @param vehicleRef Reference to the vehicle delivering this actual journey.
   */
  public entityPartition(java.lang.CharSequence key, java.lang.CharSequence lineNumber, java.lang.CharSequence antalTurerKM, java.lang.CharSequence blockRef, java.lang.CharSequence vehicleRef) {
    this.key = key;
    this.lineNumber = lineNumber;
    this.antalTurerKM = antalTurerKM;
    this.blockRef = blockRef;
    this.vehicleRef = vehicleRef;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return key;
    case 1: return lineNumber;
    case 2: return antalTurerKM;
    case 3: return blockRef;
    case 4: return vehicleRef;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: key = (java.lang.CharSequence)value$; break;
    case 1: lineNumber = (java.lang.CharSequence)value$; break;
    case 2: antalTurerKM = (java.lang.CharSequence)value$; break;
    case 3: blockRef = (java.lang.CharSequence)value$; break;
    case 4: vehicleRef = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'key' field.
   * @return The key of an entity. All entities must use the key attribute to store their primary key
   */
  public java.lang.CharSequence getKey() {
    return key;
  }

  /**
   * Sets the value of the 'key' field.
   * The key of an entity. All entities must use the key attribute to store their primary key
   * @param value the value to set.
   */
  public void setKey(java.lang.CharSequence value) {
    this.key = value;
  }

  /**
   * Gets the value of the 'lineNumber' field.
   * @return The line number related to this block journy
   */
  public java.lang.CharSequence getLineNumber() {
    return lineNumber;
  }

  /**
   * Sets the value of the 'lineNumber' field.
   * The line number related to this block journy
   * @param value the value to set.
   */
  public void setLineNumber(java.lang.CharSequence value) {
    this.lineNumber = value;
  }

  /**
   * Gets the value of the 'antalTurerKM' field.
   * @return The total km by the actual block with the refernced vvehicle
   */
  public java.lang.CharSequence getAntalTurerKM() {
    return antalTurerKM;
  }

  /**
   * Sets the value of the 'antalTurerKM' field.
   * The total km by the actual block with the refernced vvehicle
   * @param value the value to set.
   */
  public void setAntalTurerKM(java.lang.CharSequence value) {
    this.antalTurerKM = value;
  }

  /**
   * Gets the value of the 'blockRef' field.
   * @return Reference to  block this actual block is on.
   */
  public java.lang.CharSequence getBlockRef() {
    return blockRef;
  }

  /**
   * Sets the value of the 'blockRef' field.
   * Reference to  block this actual block is on.
   * @param value the value to set.
   */
  public void setBlockRef(java.lang.CharSequence value) {
    this.blockRef = value;
  }

  /**
   * Gets the value of the 'vehicleRef' field.
   * @return Reference to the vehicle delivering this actual journey.
   */
  public java.lang.CharSequence getVehicleRef() {
    return vehicleRef;
  }

  /**
   * Sets the value of the 'vehicleRef' field.
   * Reference to the vehicle delivering this actual journey.
   * @param value the value to set.
   */
  public void setVehicleRef(java.lang.CharSequence value) {
    this.vehicleRef = value;
  }

  /**
   * Creates a new entityPartition RecordBuilder.
   * @return A new entityPartition RecordBuilder
   */
  public static actualblock.key.entityPartition.Builder newBuilder() {
    return new actualblock.key.entityPartition.Builder();
  }

  /**
   * Creates a new entityPartition RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new entityPartition RecordBuilder
   */
  public static actualblock.key.entityPartition.Builder newBuilder(actualblock.key.entityPartition.Builder other) {
    return new actualblock.key.entityPartition.Builder(other);
  }

  /**
   * Creates a new entityPartition RecordBuilder by copying an existing entityPartition instance.
   * @param other The existing instance to copy.
   * @return A new entityPartition RecordBuilder
   */
  public static actualblock.key.entityPartition.Builder newBuilder(actualblock.key.entityPartition other) {
    return new actualblock.key.entityPartition.Builder(other);
  }

  /**
   * RecordBuilder for entityPartition instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<entityPartition>
    implements org.apache.avro.data.RecordBuilder<entityPartition> {

    /** The key of an entity. All entities must use the key attribute to store their primary key */
    private java.lang.CharSequence key;
    /** The line number related to this block journy */
    private java.lang.CharSequence lineNumber;
    /** The total km by the actual block with the refernced vvehicle */
    private java.lang.CharSequence antalTurerKM;
    /** Reference to  block this actual block is on. */
    private java.lang.CharSequence blockRef;
    /** Reference to the vehicle delivering this actual journey. */
    private java.lang.CharSequence vehicleRef;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(actualblock.key.entityPartition.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.key)) {
        this.key = data().deepCopy(fields()[0].schema(), other.key);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lineNumber)) {
        this.lineNumber = data().deepCopy(fields()[1].schema(), other.lineNumber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.antalTurerKM)) {
        this.antalTurerKM = data().deepCopy(fields()[2].schema(), other.antalTurerKM);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.blockRef)) {
        this.blockRef = data().deepCopy(fields()[3].schema(), other.blockRef);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.vehicleRef)) {
        this.vehicleRef = data().deepCopy(fields()[4].schema(), other.vehicleRef);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing entityPartition instance
     * @param other The existing instance to copy.
     */
    private Builder(actualblock.key.entityPartition other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.key)) {
        this.key = data().deepCopy(fields()[0].schema(), other.key);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lineNumber)) {
        this.lineNumber = data().deepCopy(fields()[1].schema(), other.lineNumber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.antalTurerKM)) {
        this.antalTurerKM = data().deepCopy(fields()[2].schema(), other.antalTurerKM);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.blockRef)) {
        this.blockRef = data().deepCopy(fields()[3].schema(), other.blockRef);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.vehicleRef)) {
        this.vehicleRef = data().deepCopy(fields()[4].schema(), other.vehicleRef);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'key' field.
      * The key of an entity. All entities must use the key attribute to store their primary key
      * @return The value.
      */
    public java.lang.CharSequence getKey() {
      return key;
    }

    /**
      * Sets the value of the 'key' field.
      * The key of an entity. All entities must use the key attribute to store their primary key
      * @param value The value of 'key'.
      * @return This builder.
      */
    public actualblock.key.entityPartition.Builder setKey(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.key = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'key' field has been set.
      * The key of an entity. All entities must use the key attribute to store their primary key
      * @return True if the 'key' field has been set, false otherwise.
      */
    public boolean hasKey() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'key' field.
      * The key of an entity. All entities must use the key attribute to store their primary key
      * @return This builder.
      */
    public actualblock.key.entityPartition.Builder clearKey() {
      key = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'lineNumber' field.
      * The line number related to this block journy
      * @return The value.
      */
    public java.lang.CharSequence getLineNumber() {
      return lineNumber;
    }

    /**
      * Sets the value of the 'lineNumber' field.
      * The line number related to this block journy
      * @param value The value of 'lineNumber'.
      * @return This builder.
      */
    public actualblock.key.entityPartition.Builder setLineNumber(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.lineNumber = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'lineNumber' field has been set.
      * The line number related to this block journy
      * @return True if the 'lineNumber' field has been set, false otherwise.
      */
    public boolean hasLineNumber() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'lineNumber' field.
      * The line number related to this block journy
      * @return This builder.
      */
    public actualblock.key.entityPartition.Builder clearLineNumber() {
      lineNumber = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'antalTurerKM' field.
      * The total km by the actual block with the refernced vvehicle
      * @return The value.
      */
    public java.lang.CharSequence getAntalTurerKM() {
      return antalTurerKM;
    }

    /**
      * Sets the value of the 'antalTurerKM' field.
      * The total km by the actual block with the refernced vvehicle
      * @param value The value of 'antalTurerKM'.
      * @return This builder.
      */
    public actualblock.key.entityPartition.Builder setAntalTurerKM(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.antalTurerKM = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'antalTurerKM' field has been set.
      * The total km by the actual block with the refernced vvehicle
      * @return True if the 'antalTurerKM' field has been set, false otherwise.
      */
    public boolean hasAntalTurerKM() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'antalTurerKM' field.
      * The total km by the actual block with the refernced vvehicle
      * @return This builder.
      */
    public actualblock.key.entityPartition.Builder clearAntalTurerKM() {
      antalTurerKM = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'blockRef' field.
      * Reference to  block this actual block is on.
      * @return The value.
      */
    public java.lang.CharSequence getBlockRef() {
      return blockRef;
    }

    /**
      * Sets the value of the 'blockRef' field.
      * Reference to  block this actual block is on.
      * @param value The value of 'blockRef'.
      * @return This builder.
      */
    public actualblock.key.entityPartition.Builder setBlockRef(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.blockRef = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'blockRef' field has been set.
      * Reference to  block this actual block is on.
      * @return True if the 'blockRef' field has been set, false otherwise.
      */
    public boolean hasBlockRef() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'blockRef' field.
      * Reference to  block this actual block is on.
      * @return This builder.
      */
    public actualblock.key.entityPartition.Builder clearBlockRef() {
      blockRef = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'vehicleRef' field.
      * Reference to the vehicle delivering this actual journey.
      * @return The value.
      */
    public java.lang.CharSequence getVehicleRef() {
      return vehicleRef;
    }

    /**
      * Sets the value of the 'vehicleRef' field.
      * Reference to the vehicle delivering this actual journey.
      * @param value The value of 'vehicleRef'.
      * @return This builder.
      */
    public actualblock.key.entityPartition.Builder setVehicleRef(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.vehicleRef = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'vehicleRef' field has been set.
      * Reference to the vehicle delivering this actual journey.
      * @return True if the 'vehicleRef' field has been set, false otherwise.
      */
    public boolean hasVehicleRef() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'vehicleRef' field.
      * Reference to the vehicle delivering this actual journey.
      * @return This builder.
      */
    public actualblock.key.entityPartition.Builder clearVehicleRef() {
      vehicleRef = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public entityPartition build() {
      try {
        entityPartition record = new entityPartition();
        record.key = fieldSetFlags()[0] ? this.key : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.lineNumber = fieldSetFlags()[1] ? this.lineNumber : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.antalTurerKM = fieldSetFlags()[2] ? this.antalTurerKM : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.blockRef = fieldSetFlags()[3] ? this.blockRef : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.vehicleRef = fieldSetFlags()[4] ? this.vehicleRef : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<entityPartition>
    WRITER$ = (org.apache.avro.io.DatumWriter<entityPartition>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<entityPartition>
    READER$ = (org.apache.avro.io.DatumReader<entityPartition>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
