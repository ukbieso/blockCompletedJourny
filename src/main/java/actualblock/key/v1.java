/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package actualblock.key;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** Key partition of an actual journey. An actual journey connects a vehicle to a journey and captures how a planned journey was actualy delivered. */
@org.apache.avro.specific.AvroGenerated
public class v1 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3834258617322617414L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"v1\",\"namespace\":\"actualblock.key\",\"doc\":\"Key partition of an actual journey. An actual journey connects a vehicle to a journey and captures how a planned journey was actualy delivered.\",\"fields\":[{\"name\":\"timestamp\",\"type\":\"string\",\"doc\":\"Timestamp as close to the actual event that changed the entity in ISO format. Ex. GPS timstamp\"},{\"name\":\"traceID\",\"type\":\"string\",\"doc\":\"Identify the a transaction uniquely across multiple changes in entities and commands. If a change in an entity is done as a consequence of a change in another entity partition or a command the traceID is copyed from that record. Otherwise a new unique UUID is created.\"},{\"name\":\"originID\",\"type\":\"string\",\"doc\":\"Identify the originating senderID of a transaction across multiple changes in entities and commands. If a change in an entity is done as a consequence of a change in another entity partition or a command the senderID is copyed from that record. Otherwise same value as in senderID is used.\"},{\"name\":\"senderID\",\"type\":\"string\",\"doc\":\"Identify the creator of this change to the entity partition\"},{\"name\":\"name\",\"type\":\"string\",\"doc\":\"This identifiy the actual block entity and sould always be set to 'actualblock' in this schema\",\"default\":\"actualblock\"},{\"name\":\"partition\",\"type\":\"string\",\"doc\":\"This identifiy the entity partition and sould always be set to 'key' in this schema\",\"default\":\"key\"},{\"name\":\"version\",\"type\":\"int\",\"doc\":\"This identifiy the version of the schema and sould always be set to 1 in this schema\",\"default\":1},{\"name\":\"entityPartition\",\"type\":{\"type\":\"record\",\"name\":\"entityPartition\",\"doc\":\"The data of the entity partition\",\"fields\":[{\"name\":\"key\",\"type\":\"string\",\"doc\":\"The key of an entity. All entities must use the key attribute to store their primary key\"},{\"name\":\"lineNumber\",\"type\":\"string\",\"doc\":\"The line number related to this block journy\"},{\"name\":\"antalTurerKM\",\"type\":\"string\",\"doc\":\"The total km by the actual block with the refernced vvehicle\"},{\"name\":\"blockRef\",\"type\":\"string\",\"doc\":\"Reference to  block this actual block is on.\"},{\"name\":\"vehicleRef\",\"type\":\"string\",\"doc\":\"Reference to the vehicle delivering this actual journey.\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<v1> ENCODER =
      new BinaryMessageEncoder<v1>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<v1> DECODER =
      new BinaryMessageDecoder<v1>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<v1> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<v1> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<v1>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this v1 to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a v1 from a ByteBuffer. */
  public static v1 fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Timestamp as close to the actual event that changed the entity in ISO format. Ex. GPS timstamp */
  @Deprecated public java.lang.CharSequence timestamp;
  /** Identify the a transaction uniquely across multiple changes in entities and commands. If a change in an entity is done as a consequence of a change in another entity partition or a command the traceID is copyed from that record. Otherwise a new unique UUID is created. */
  @Deprecated public java.lang.CharSequence traceID;
  /** Identify the originating senderID of a transaction across multiple changes in entities and commands. If a change in an entity is done as a consequence of a change in another entity partition or a command the senderID is copyed from that record. Otherwise same value as in senderID is used. */
  @Deprecated public java.lang.CharSequence originID;
  /** Identify the creator of this change to the entity partition */
  @Deprecated public java.lang.CharSequence senderID;
  /** This identifiy the actual block entity and sould always be set to 'actualblock' in this schema */
  @Deprecated public java.lang.CharSequence name;
  /** This identifiy the entity partition and sould always be set to 'key' in this schema */
  @Deprecated public java.lang.CharSequence partition;
  /** This identifiy the version of the schema and sould always be set to 1 in this schema */
  @Deprecated public int version;
  @Deprecated public actualblock.key.entityPartition entityPartition;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public v1() {}

  /**
   * All-args constructor.
   * @param timestamp Timestamp as close to the actual event that changed the entity in ISO format. Ex. GPS timstamp
   * @param traceID Identify the a transaction uniquely across multiple changes in entities and commands. If a change in an entity is done as a consequence of a change in another entity partition or a command the traceID is copyed from that record. Otherwise a new unique UUID is created.
   * @param originID Identify the originating senderID of a transaction across multiple changes in entities and commands. If a change in an entity is done as a consequence of a change in another entity partition or a command the senderID is copyed from that record. Otherwise same value as in senderID is used.
   * @param senderID Identify the creator of this change to the entity partition
   * @param name This identifiy the actual block entity and sould always be set to 'actualblock' in this schema
   * @param partition This identifiy the entity partition and sould always be set to 'key' in this schema
   * @param version This identifiy the version of the schema and sould always be set to 1 in this schema
   * @param entityPartition The new value for entityPartition
   */
  public v1(java.lang.CharSequence timestamp, java.lang.CharSequence traceID, java.lang.CharSequence originID, java.lang.CharSequence senderID, java.lang.CharSequence name, java.lang.CharSequence partition, java.lang.Integer version, actualblock.key.entityPartition entityPartition) {
    this.timestamp = timestamp;
    this.traceID = traceID;
    this.originID = originID;
    this.senderID = senderID;
    this.name = name;
    this.partition = partition;
    this.version = version;
    this.entityPartition = entityPartition;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return timestamp;
    case 1: return traceID;
    case 2: return originID;
    case 3: return senderID;
    case 4: return name;
    case 5: return partition;
    case 6: return version;
    case 7: return entityPartition;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: timestamp = (java.lang.CharSequence)value$; break;
    case 1: traceID = (java.lang.CharSequence)value$; break;
    case 2: originID = (java.lang.CharSequence)value$; break;
    case 3: senderID = (java.lang.CharSequence)value$; break;
    case 4: name = (java.lang.CharSequence)value$; break;
    case 5: partition = (java.lang.CharSequence)value$; break;
    case 6: version = (java.lang.Integer)value$; break;
    case 7: entityPartition = (actualblock.key.entityPartition)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return Timestamp as close to the actual event that changed the entity in ISO format. Ex. GPS timstamp
   */
  public java.lang.CharSequence getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * Timestamp as close to the actual event that changed the entity in ISO format. Ex. GPS timstamp
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.CharSequence value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'traceID' field.
   * @return Identify the a transaction uniquely across multiple changes in entities and commands. If a change in an entity is done as a consequence of a change in another entity partition or a command the traceID is copyed from that record. Otherwise a new unique UUID is created.
   */
  public java.lang.CharSequence getTraceID() {
    return traceID;
  }

  /**
   * Sets the value of the 'traceID' field.
   * Identify the a transaction uniquely across multiple changes in entities and commands. If a change in an entity is done as a consequence of a change in another entity partition or a command the traceID is copyed from that record. Otherwise a new unique UUID is created.
   * @param value the value to set.
   */
  public void setTraceID(java.lang.CharSequence value) {
    this.traceID = value;
  }

  /**
   * Gets the value of the 'originID' field.
   * @return Identify the originating senderID of a transaction across multiple changes in entities and commands. If a change in an entity is done as a consequence of a change in another entity partition or a command the senderID is copyed from that record. Otherwise same value as in senderID is used.
   */
  public java.lang.CharSequence getOriginID() {
    return originID;
  }

  /**
   * Sets the value of the 'originID' field.
   * Identify the originating senderID of a transaction across multiple changes in entities and commands. If a change in an entity is done as a consequence of a change in another entity partition or a command the senderID is copyed from that record. Otherwise same value as in senderID is used.
   * @param value the value to set.
   */
  public void setOriginID(java.lang.CharSequence value) {
    this.originID = value;
  }

  /**
   * Gets the value of the 'senderID' field.
   * @return Identify the creator of this change to the entity partition
   */
  public java.lang.CharSequence getSenderID() {
    return senderID;
  }

  /**
   * Sets the value of the 'senderID' field.
   * Identify the creator of this change to the entity partition
   * @param value the value to set.
   */
  public void setSenderID(java.lang.CharSequence value) {
    this.senderID = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return This identifiy the actual block entity and sould always be set to 'actualblock' in this schema
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * This identifiy the actual block entity and sould always be set to 'actualblock' in this schema
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'partition' field.
   * @return This identifiy the entity partition and sould always be set to 'key' in this schema
   */
  public java.lang.CharSequence getPartition() {
    return partition;
  }

  /**
   * Sets the value of the 'partition' field.
   * This identifiy the entity partition and sould always be set to 'key' in this schema
   * @param value the value to set.
   */
  public void setPartition(java.lang.CharSequence value) {
    this.partition = value;
  }

  /**
   * Gets the value of the 'version' field.
   * @return This identifiy the version of the schema and sould always be set to 1 in this schema
   */
  public java.lang.Integer getVersion() {
    return version;
  }

  /**
   * Sets the value of the 'version' field.
   * This identifiy the version of the schema and sould always be set to 1 in this schema
   * @param value the value to set.
   */
  public void setVersion(java.lang.Integer value) {
    this.version = value;
  }

  /**
   * Gets the value of the 'entityPartition' field.
   * @return The value of the 'entityPartition' field.
   */
  public actualblock.key.entityPartition getEntityPartition() {
    return entityPartition;
  }

  /**
   * Sets the value of the 'entityPartition' field.
   * @param value the value to set.
   */
  public void setEntityPartition(actualblock.key.entityPartition value) {
    this.entityPartition = value;
  }

  /**
   * Creates a new v1 RecordBuilder.
   * @return A new v1 RecordBuilder
   */
  public static actualblock.key.v1.Builder newBuilder() {
    return new actualblock.key.v1.Builder();
  }

  /**
   * Creates a new v1 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new v1 RecordBuilder
   */
  public static actualblock.key.v1.Builder newBuilder(actualblock.key.v1.Builder other) {
    return new actualblock.key.v1.Builder(other);
  }

  /**
   * Creates a new v1 RecordBuilder by copying an existing v1 instance.
   * @param other The existing instance to copy.
   * @return A new v1 RecordBuilder
   */
  public static actualblock.key.v1.Builder newBuilder(actualblock.key.v1 other) {
    return new actualblock.key.v1.Builder(other);
  }

  /**
   * RecordBuilder for v1 instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<v1>
    implements org.apache.avro.data.RecordBuilder<v1> {

    /** Timestamp as close to the actual event that changed the entity in ISO format. Ex. GPS timstamp */
    private java.lang.CharSequence timestamp;
    /** Identify the a transaction uniquely across multiple changes in entities and commands. If a change in an entity is done as a consequence of a change in another entity partition or a command the traceID is copyed from that record. Otherwise a new unique UUID is created. */
    private java.lang.CharSequence traceID;
    /** Identify the originating senderID of a transaction across multiple changes in entities and commands. If a change in an entity is done as a consequence of a change in another entity partition or a command the senderID is copyed from that record. Otherwise same value as in senderID is used. */
    private java.lang.CharSequence originID;
    /** Identify the creator of this change to the entity partition */
    private java.lang.CharSequence senderID;
    /** This identifiy the actual block entity and sould always be set to 'actualblock' in this schema */
    private java.lang.CharSequence name;
    /** This identifiy the entity partition and sould always be set to 'key' in this schema */
    private java.lang.CharSequence partition;
    /** This identifiy the version of the schema and sould always be set to 1 in this schema */
    private int version;
    private actualblock.key.entityPartition entityPartition;
    private actualblock.key.entityPartition.Builder entityPartitionBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(actualblock.key.v1.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.traceID)) {
        this.traceID = data().deepCopy(fields()[1].schema(), other.traceID);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.originID)) {
        this.originID = data().deepCopy(fields()[2].schema(), other.originID);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.senderID)) {
        this.senderID = data().deepCopy(fields()[3].schema(), other.senderID);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.name)) {
        this.name = data().deepCopy(fields()[4].schema(), other.name);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.partition)) {
        this.partition = data().deepCopy(fields()[5].schema(), other.partition);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.version)) {
        this.version = data().deepCopy(fields()[6].schema(), other.version);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.entityPartition)) {
        this.entityPartition = data().deepCopy(fields()[7].schema(), other.entityPartition);
        fieldSetFlags()[7] = true;
      }
      if (other.hasEntityPartitionBuilder()) {
        this.entityPartitionBuilder = actualblock.key.entityPartition.newBuilder(other.getEntityPartitionBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing v1 instance
     * @param other The existing instance to copy.
     */
    private Builder(actualblock.key.v1 other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.traceID)) {
        this.traceID = data().deepCopy(fields()[1].schema(), other.traceID);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.originID)) {
        this.originID = data().deepCopy(fields()[2].schema(), other.originID);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.senderID)) {
        this.senderID = data().deepCopy(fields()[3].schema(), other.senderID);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.name)) {
        this.name = data().deepCopy(fields()[4].schema(), other.name);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.partition)) {
        this.partition = data().deepCopy(fields()[5].schema(), other.partition);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.version)) {
        this.version = data().deepCopy(fields()[6].schema(), other.version);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.entityPartition)) {
        this.entityPartition = data().deepCopy(fields()[7].schema(), other.entityPartition);
        fieldSetFlags()[7] = true;
      }
      this.entityPartitionBuilder = null;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * Timestamp as close to the actual event that changed the entity in ISO format. Ex. GPS timstamp
      * @return The value.
      */
    public java.lang.CharSequence getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * Timestamp as close to the actual event that changed the entity in ISO format. Ex. GPS timstamp
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public actualblock.key.v1.Builder setTimestamp(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.timestamp = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * Timestamp as close to the actual event that changed the entity in ISO format. Ex. GPS timstamp
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * Timestamp as close to the actual event that changed the entity in ISO format. Ex. GPS timstamp
      * @return This builder.
      */
    public actualblock.key.v1.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'traceID' field.
      * Identify the a transaction uniquely across multiple changes in entities and commands. If a change in an entity is done as a consequence of a change in another entity partition or a command the traceID is copyed from that record. Otherwise a new unique UUID is created.
      * @return The value.
      */
    public java.lang.CharSequence getTraceID() {
      return traceID;
    }

    /**
      * Sets the value of the 'traceID' field.
      * Identify the a transaction uniquely across multiple changes in entities and commands. If a change in an entity is done as a consequence of a change in another entity partition or a command the traceID is copyed from that record. Otherwise a new unique UUID is created.
      * @param value The value of 'traceID'.
      * @return This builder.
      */
    public actualblock.key.v1.Builder setTraceID(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.traceID = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'traceID' field has been set.
      * Identify the a transaction uniquely across multiple changes in entities and commands. If a change in an entity is done as a consequence of a change in another entity partition or a command the traceID is copyed from that record. Otherwise a new unique UUID is created.
      * @return True if the 'traceID' field has been set, false otherwise.
      */
    public boolean hasTraceID() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'traceID' field.
      * Identify the a transaction uniquely across multiple changes in entities and commands. If a change in an entity is done as a consequence of a change in another entity partition or a command the traceID is copyed from that record. Otherwise a new unique UUID is created.
      * @return This builder.
      */
    public actualblock.key.v1.Builder clearTraceID() {
      traceID = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'originID' field.
      * Identify the originating senderID of a transaction across multiple changes in entities and commands. If a change in an entity is done as a consequence of a change in another entity partition or a command the senderID is copyed from that record. Otherwise same value as in senderID is used.
      * @return The value.
      */
    public java.lang.CharSequence getOriginID() {
      return originID;
    }

    /**
      * Sets the value of the 'originID' field.
      * Identify the originating senderID of a transaction across multiple changes in entities and commands. If a change in an entity is done as a consequence of a change in another entity partition or a command the senderID is copyed from that record. Otherwise same value as in senderID is used.
      * @param value The value of 'originID'.
      * @return This builder.
      */
    public actualblock.key.v1.Builder setOriginID(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.originID = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'originID' field has been set.
      * Identify the originating senderID of a transaction across multiple changes in entities and commands. If a change in an entity is done as a consequence of a change in another entity partition or a command the senderID is copyed from that record. Otherwise same value as in senderID is used.
      * @return True if the 'originID' field has been set, false otherwise.
      */
    public boolean hasOriginID() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'originID' field.
      * Identify the originating senderID of a transaction across multiple changes in entities and commands. If a change in an entity is done as a consequence of a change in another entity partition or a command the senderID is copyed from that record. Otherwise same value as in senderID is used.
      * @return This builder.
      */
    public actualblock.key.v1.Builder clearOriginID() {
      originID = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'senderID' field.
      * Identify the creator of this change to the entity partition
      * @return The value.
      */
    public java.lang.CharSequence getSenderID() {
      return senderID;
    }

    /**
      * Sets the value of the 'senderID' field.
      * Identify the creator of this change to the entity partition
      * @param value The value of 'senderID'.
      * @return This builder.
      */
    public actualblock.key.v1.Builder setSenderID(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.senderID = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'senderID' field has been set.
      * Identify the creator of this change to the entity partition
      * @return True if the 'senderID' field has been set, false otherwise.
      */
    public boolean hasSenderID() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'senderID' field.
      * Identify the creator of this change to the entity partition
      * @return This builder.
      */
    public actualblock.key.v1.Builder clearSenderID() {
      senderID = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * This identifiy the actual block entity and sould always be set to 'actualblock' in this schema
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * This identifiy the actual block entity and sould always be set to 'actualblock' in this schema
      * @param value The value of 'name'.
      * @return This builder.
      */
    public actualblock.key.v1.Builder setName(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.name = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * This identifiy the actual block entity and sould always be set to 'actualblock' in this schema
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'name' field.
      * This identifiy the actual block entity and sould always be set to 'actualblock' in this schema
      * @return This builder.
      */
    public actualblock.key.v1.Builder clearName() {
      name = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'partition' field.
      * This identifiy the entity partition and sould always be set to 'key' in this schema
      * @return The value.
      */
    public java.lang.CharSequence getPartition() {
      return partition;
    }

    /**
      * Sets the value of the 'partition' field.
      * This identifiy the entity partition and sould always be set to 'key' in this schema
      * @param value The value of 'partition'.
      * @return This builder.
      */
    public actualblock.key.v1.Builder setPartition(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.partition = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'partition' field has been set.
      * This identifiy the entity partition and sould always be set to 'key' in this schema
      * @return True if the 'partition' field has been set, false otherwise.
      */
    public boolean hasPartition() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'partition' field.
      * This identifiy the entity partition and sould always be set to 'key' in this schema
      * @return This builder.
      */
    public actualblock.key.v1.Builder clearPartition() {
      partition = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'version' field.
      * This identifiy the version of the schema and sould always be set to 1 in this schema
      * @return The value.
      */
    public java.lang.Integer getVersion() {
      return version;
    }

    /**
      * Sets the value of the 'version' field.
      * This identifiy the version of the schema and sould always be set to 1 in this schema
      * @param value The value of 'version'.
      * @return This builder.
      */
    public actualblock.key.v1.Builder setVersion(int value) {
      validate(fields()[6], value);
      this.version = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'version' field has been set.
      * This identifiy the version of the schema and sould always be set to 1 in this schema
      * @return True if the 'version' field has been set, false otherwise.
      */
    public boolean hasVersion() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'version' field.
      * This identifiy the version of the schema and sould always be set to 1 in this schema
      * @return This builder.
      */
    public actualblock.key.v1.Builder clearVersion() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'entityPartition' field.
      * @return The value.
      */
    public actualblock.key.entityPartition getEntityPartition() {
      return entityPartition;
    }

    /**
      * Sets the value of the 'entityPartition' field.
      * @param value The value of 'entityPartition'.
      * @return This builder.
      */
    public actualblock.key.v1.Builder setEntityPartition(actualblock.key.entityPartition value) {
      validate(fields()[7], value);
      this.entityPartitionBuilder = null;
      this.entityPartition = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'entityPartition' field has been set.
      * @return True if the 'entityPartition' field has been set, false otherwise.
      */
    public boolean hasEntityPartition() {
      return fieldSetFlags()[7];
    }

    /**
     * Gets the Builder instance for the 'entityPartition' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public actualblock.key.entityPartition.Builder getEntityPartitionBuilder() {
      if (entityPartitionBuilder == null) {
        if (hasEntityPartition()) {
          setEntityPartitionBuilder(actualblock.key.entityPartition.newBuilder(entityPartition));
        } else {
          setEntityPartitionBuilder(actualblock.key.entityPartition.newBuilder());
        }
      }
      return entityPartitionBuilder;
    }

    /**
     * Sets the Builder instance for the 'entityPartition' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public actualblock.key.v1.Builder setEntityPartitionBuilder(actualblock.key.entityPartition.Builder value) {
      clearEntityPartition();
      entityPartitionBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'entityPartition' field has an active Builder instance
     * @return True if the 'entityPartition' field has an active Builder instance
     */
    public boolean hasEntityPartitionBuilder() {
      return entityPartitionBuilder != null;
    }

    /**
      * Clears the value of the 'entityPartition' field.
      * @return This builder.
      */
    public actualblock.key.v1.Builder clearEntityPartition() {
      entityPartition = null;
      entityPartitionBuilder = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public v1 build() {
      try {
        v1 record = new v1();
        record.timestamp = fieldSetFlags()[0] ? this.timestamp : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.traceID = fieldSetFlags()[1] ? this.traceID : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.originID = fieldSetFlags()[2] ? this.originID : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.senderID = fieldSetFlags()[3] ? this.senderID : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.name = fieldSetFlags()[4] ? this.name : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.partition = fieldSetFlags()[5] ? this.partition : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.version = fieldSetFlags()[6] ? this.version : (java.lang.Integer) defaultValue(fields()[6]);
        if (entityPartitionBuilder != null) {
          record.entityPartition = this.entityPartitionBuilder.build();
        } else {
          record.entityPartition = fieldSetFlags()[7] ? this.entityPartition : (actualblock.key.entityPartition) defaultValue(fields()[7]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<v1>
    WRITER$ = (org.apache.avro.io.DatumWriter<v1>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<v1>
    READER$ = (org.apache.avro.io.DatumReader<v1>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
